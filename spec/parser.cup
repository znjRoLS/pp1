package rosko.bojan;

import java_cup.runtime.*;
import java.util.logging.Logger;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

//////////////////////////////////////////////

parser code {:
    Logger log = Logger.getLogger(Parser.class.toString());
    Scanner scanner;
    Symbol currSym;

    void report_error(String msg) {
        log.info(msg);
    }
:}

init with {:
    scanner = this.getScanner();
    Tab.init();

    Tab.insert(Obj.Con, "void", Tab.nullType);
:}

scan with {:
    currSym = scanner.next_token();
    if (currSym != null && currSym.value != null) {
        log.info("Parsed symbol: " + currSym.value + " - " + currSym);
    }
    return currSym;
:}

action code {:
    Obj currentMethod = null;
    Struct currentVarDeclType;

    void report_error(String msg) {
        this.parser.log.info("ERROR: " + msg);
        //System.out.println("ERROR: " + msg);
    }
    void report_info(String msg) {
        this.parser.log.info("INFO: " + msg);
        //System.out.println("INFO: " + msg);
    }
:}


// TERMINALS
////////////////////////////////////////////////

// RESERVED WORDS
terminal PROGRAM;
terminal NEW, RETURN, VOID;
terminal FOR, BREAK, CONTINUE;
terminal CLASS, CONST, EXTENDS, STATIC;
terminal IF, ELSE;
terminal PRINT, READ;

// IDENTIFICATOR AND LITERALS
terminal ID, CONST_NUMBER, CONST_CHAR, CONST_BOOL;

// OPERATORS
terminal ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN, ASSIGN_ADDITION, ASSIGN_SUBTRACTION, ASSIGN_MULTIPLICATION, ASSIGN_DIVISION, ASSIGN_MODULO;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA, DOT;
terminal PARENTHESES_LEFT, PARENTHESES_RIGHT, BRACKETS_LEFT, BRACKETS_RIGHT, BRACES_LEFT, BRACES_RIGHT;

////////////////////////////////////////////////

// NON TERMINALS
////////////////////////////////////////////////

non terminal Program, ProgramName;
non terminal DeclarationList, Declaration;
non terminal VarDeclarationLine;
non terminal ConstDeclarationLine, ConstDeclarationList, ConstDeclaration, Const;
non terminal ClassDeclarationLine;
non terminal MethodDeclarationList;
non terminal Type;

////////////////////////////////////////////////
////////////////////////////////////////////////
// PARSER RULES START SECTION
////////////////////////////////////////////////
////////////////////////////////////////////////

// PROGRAM
////////////////////////////////////////////////

Program ::= PROGRAM ProgramName:progObj DeclarationList
{:
    report_info("Program just before left braces");
:}
BRACES_LEFT MethodDeclarationList BRACES_RIGHT
{:
    report_info("Parsed whole program");
:};

ProgramName ::= ID:progName
{:
    report_info("Parsed program name " + progName);
:};

////////////////////////////////////////////////

// DECLARATIONS
////////////////////////////////////////////////

DeclarationList ::= DeclarationList Declaration
{:
    report_info("Declaration list Declaration");
:}
| /* epsilon */
{:
    report_info("Declaration list epsilon");
:};

Declaration ::=     VarDeclarationLine
                    | ConstDeclarationLine
                    | ClassDeclarationLine;

////////////////////////////////////////////////

// RANDOM? DECLARATION
////////////////////////////////////////////////

Type ::= ID:id
{:
    report_info("Matched type " + id);
:};

////////////////////////////////////////////////

// CONSTANTS DECLARATION
////////////////////////////////////////////////

ConstDeclarationLine ::=    CONST Type ConstDeclarationList SEMICOLON;

ConstDeclarationList ::=    ConstDeclarationList COMMA ConstDeclaration
                          | ConstDeclaration;

ConstDeclaration ::= ID ASSIGN Const:constObj
{:
    report_info("Assigning to constant " + constObj);
:};

Const ::= CONST_NUMBER | CONST_CHAR | CONST_BOOL;

////////////////////////////////////////////////

// OTHER
////////////////////////////////////////////////

VarDeclarationLine ::= VOID SEMICOLON
{:
    report_info("Var decl, not yet implemented");
:};

ClassDeclarationLine ::= VOID VOID SEMICOLON
{:
    report_info("Class decl, not yet implemented");
:};

MethodDeclarationList ::= VOID VOID VOID SEMICOLON
{:
    report_info("Method decl, not yet implemented");
:};



