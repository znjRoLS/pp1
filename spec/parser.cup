package rosko.bojan;

import java_cup.runtime.*;
import java.util.logging.Logger;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

//////////////////////////////////////////////

parser code {:
    Logger log = Logger.getLogger(Parser.class.toString());
    Scanner scanner;
    Symbol currSym;

    void report_error(String msg) {
        //this.parser.log.info("ERROR: " + msg);
        System.out.println("ERROR: " + msg);
    }
    void report_info(String msg) {
        //this.parser.log.info("INFO: " + msg);
        System.out.println("INFO: " + msg);
    }
:}

init with {:
    scanner = this.getScanner();
    Tab.init();

    Tab.insert(Obj.Con, "void", Tab.nullType);
:}

scan with {:
    currSym = scanner.next_token();
    if (currSym != null && currSym.value != null) {
        report_info("Parsed symbol: " + currSym.value + " - " + currSym);
    }
    return currSym;
:}

action code {:
    Obj currentMethod = null;
    Struct currentVarDeclType;

    void report_error(String msg) {
        //this.parser.log.info("ERROR: " + msg);
        System.out.println("ERROR: " + msg);
    }
    void report_info(String msg) {
        //this.parser.log.info("INFO: " + msg);
        System.out.println("INFO: " + msg);
    }
:}

////////////////////////////////////////////////

// TERMINALS
////////////////////////////////////////////////

// RESERVED WORDS
terminal PROGRAM;
terminal NEW, RETURN, VOID;
terminal FOR, BREAK, CONTINUE;
terminal CLASS, CONST, EXTENDS, STATIC;
terminal IF, ELSE;
terminal PRINT, READ;

// IDENTIFICATOR AND LITERALS
terminal ID, CONST_NUMBER, CONST_CHAR, CONST_BOOL;

// OPERATORS
terminal ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN, ASSIGN_ADDITION, ASSIGN_SUBTRACTION, ASSIGN_MULTIPLICATION, ASSIGN_DIVISION, ASSIGN_MODULO;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA, DOT;
terminal PARENTHESES_LEFT, PARENTHESES_RIGHT, BRACKETS_LEFT, BRACKETS_RIGHT, BRACES_LEFT, BRACES_RIGHT;

////////////////////////////////////////////////

// NON TERMINALS
////////////////////////////////////////////////

non terminal Program, ProgramName;
non terminal DeclarationList, Declaration;
non terminal VarDeclarationLine, VarDeclarationList, VarID, VarIDList;
non terminal ConstDeclarationLine, ConstIDList, ConstID, Const;
non terminal ClassDeclaration, ClassExtends;
non terminal MethodDeclarationSection, OptionalMethodDeclarationSection, MethodDeclarationList;
non terminal Type;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                      PROGRAM
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        Program ::= PROGRAM ProgramName:progObj DeclarationList
                                                    {:
                                                        report_info("Program just before left braces");
                                                    :}
                                                    MethodDeclarationSection
                                                    {:
                                                        report_info("Parsed whole program");
                                                    :};

                                    ProgramName ::= ID:progName
                                                    {:
                                                        report_info("Parsed program name " + progName);
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                 DECLARATIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                DeclarationList ::= DeclarationList Declaration
                                                    {:
                                                        report_info("Declaration list Declaration");
                                                    :}
                                                    | /* epsilon */
                                                    {:
                                                        report_info("Declaration list epsilon");
                                                    :};

                                    Declaration ::= VarDeclarationLine
                                                    | ConstDeclarationLine
                                                    | ClassDeclaration;

                                           Type ::= ID:id
                                                    {:
                                                        report_info("Matched type " + id);
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                        CONSTANTS DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                           ConstDeclarationLine ::= CONST Type ConstIDList SEMICOLON;

                                    ConstIDList ::= ConstIDList COMMA ConstID
                                                    | ConstID;

                                        ConstID ::= ID:constObj ASSIGN Const
                                                    {:
                                                        report_info("ConstDeclaration " + constObj);
                                                    :};

                                          Const ::= CONST_NUMBER
                                                    | CONST_CHAR
                                                    | CONST_BOOL;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                              VAR DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                             VarDeclarationList ::= VarDeclarationList VarDeclarationLine
                                                    | /* epsilon */;

                             VarDeclarationLine ::= Type VarIDList SEMICOLON;

                                      VarIDList ::= VarIDList COMMA VarID
                                                    | VarID;

                                          VarID ::= ID
                                                    | ID:varObj BRACKETS_LEFT BRACKETS_RIGHT
                                                    {:
                                                        report_info("VarDeclaration " + varObj);
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                            CLASS DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                               ClassDeclaration ::= CLASS ID ClassExtends BRACES_LEFT VarDeclarationList
                                                    OptionalMethodDeclarationSection BRACES_RIGHT
                                                    {:
                                                        report_info("Parsed class declaration!");
                                                    :};

                                   ClassExtends ::= EXTENDS Type
                                                    {:
                                                        report_info ("Parsed nonempty class extends");
                                                    :}
                                                    | /* epsilon */
                                                    {:
                                                        report_info ("Parsed empty class extends");
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                           METHOD DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                       MethodDeclarationSection ::= BRACES_LEFT MethodDeclarationList BRACES_RIGHT;

               OptionalMethodDeclarationSection ::= MethodDeclarationSection
                                                    | /* epsilon */;

                          MethodDeclarationList ::= VOID VOID VOID SEMICOLON
                                                    {:
                                                        report_info("Method decl, not yet implemented");
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                        OTHER          
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




