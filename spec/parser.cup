package rosko.bojan;

import java_cup.runtime.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

import rosko.bojan.SymbolCounter;
import rosko.bojan.SemanticContext.SemanticSymbol.*;
import rosko.bojan.SemanticContext.SemanticSymbol;

//////////////////////////////////////////////

parser code {:
    Logger logger = LogManager.getLogger(Parser.class);
    Scanner scanner;
    Symbol currSym;

    public SemanticContext context = new SemanticContext();

    void report_error(String msg) {
        logger.error(msg);
        System.err.println("ERROR: " + msg);
    }
    void report_info(String msg) {
        logger.info(msg);
        //System.err.println("INFO: " + msg);
    }
:}

init with {:
    scanner = this.getScanner();
    Tab.init();

    Tab.insert(Obj.Con, "void", Tab.nullType);
:}

scan with {:
    currSym = scanner.next_token();
    if (currSym != null && currSym.value != null) {
        report_info("Parsed symbol: " + currSym.value + " - " + currSym);
    }
    return currSym;
:}

action code {:
    Obj currentMethod = null;
    Struct currentVarDeclType;


    void report_error(String msg) {
        this.parser.logger.error(msg);
        //System.err.println("ERROR: " + msg);
    }
    void report_info(String msg) {
        this.parser.logger.info(msg);
        //System.err.println("INFO: " + msg);
    }

    void foundSymbol(SemanticContext.SemanticSymbol type, String name) {
        this.parser.context.foundSymbol(type, name);
    }
:}

////////////////////////////////////////////////

// TERMINALS
////////////////////////////////////////////////

// RESERVED WORDS
terminal PROGRAM, ERROR;
terminal NEW, RETURN, VOID;
terminal FOR, BREAK, CONTINUE;
terminal CLASS, CONST, EXTENDS, STATIC;
terminal IF, ELSE;
terminal PRINT, READ;

// IDENTIFICATOR AND LITERALS
terminal ID, CONST_NUMBER, CONST_CHAR, CONST_BOOL;

// OPERATORS
terminal ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN, ASSIGN_ADDITION, ASSIGN_SUBTRACTION, ASSIGN_MULTIPLICATION, ASSIGN_DIVISION, ASSIGN_MODULO;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA, DOT;
terminal PARENTHESES_LEFT, PARENTHESES_RIGHT, BRACKETS_LEFT, BRACKETS_RIGHT, BRACES_LEFT, BRACES_RIGHT;

////////////////////////////////////////////////

// NON TERMINALS
////////////////////////////////////////////////

non terminal Program, ProgramName;
non terminal DeclarationList, Declaration;
non terminal VarDeclarationLine, VarDeclarationList, VarID, VarIDList, VarIDSingle;
non terminal ConstDeclarationLine, ConstIDList, ConstID, Const;
non terminal ClassDeclaration, ClassExtends, ClassName;
non terminal MethodDeclarationSection, OptionalMethodDeclarationSection;
non terminal MethodDeclarationList, MethodDeclaration, MethodName;
non terminal FormalParameterSection, FormalParameterList, FormalParameter;
non terminal Type, MethodType, OptionalStatic;
non terminal StatementBlock, StatementList, Statement;
non terminal StatementDesignator, StatementIf, StatementFor, StatementBreak;
non terminal StatementContinue, StatementReturn, StatementRead, StatementPrint;
non terminal DesignatorStatement, OptionalDesignatorStatement, Designator;
non terminal ActualParameterSection, ActualParameterList, ActualParameter;
non terminal MemberList, Member;
non terminal OptionalDimension, Dimension;
non terminal OptionalMethodCall, MethodCall;
non terminal Condition, OptionalCondition, ConditionTermList, ConditionTerm, ConditionFactorList, ConditionFactor;
non terminal OptionalUnaryMinus, Expression;
non terminal Term, AdditionTermList, Factor, MultiplicationFactorList;
non terminal AdditionOperator, AdditionOperatorLeft, AdditionOperatorRight;
non terminal MultiplicationOperator, MultiplicationOperatorLeft, MultiplicationOperatorRight;
non terminal RelationalOperator, AssignOperator;

precedence left ELSE;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                      PROGRAM
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        Program ::= PROGRAM
                                                    {:
                                                        report_info("Program 1");
                                                    :}
                                                    ProgramName
                                                    {:
                                                        report_info("Program 2");
                                                    :}
                                                    DeclarationList
                                                    {:
                                                        report_info("Program 3");
                                                    :}
                                                    MethodDeclarationSection
                                                    {:
                                                        report_info("Program 4");
                                                    :};

                                    ProgramName ::= ID:progName
                                                    {:
                                                        Tab.insert(Obj.Prog, progName.toString(), Tab.noType);
                                                        report_info("Parsed program name " + progName);
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                 DECLARATIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                DeclarationList ::= DeclarationList Declaration
                                                    {:
                                                        report_info("Declaration list Declaration");
                                                    :}
                                                    | /* epsilon */
                                                    {:
                                                        report_info("Declaration list epsilon");
                                                    :};

                                    Declaration ::= VarDeclarationLine
                                                    | ConstDeclarationLine
                                                    | ClassDeclaration;

                                           Type ::= ID:id
                                                    {:
                                                        report_info("Matched type " + id);
                                                    :};

                                 OptionalStatic ::= STATIC
                                                    | /* epsilon */;

                                     MethodType ::= Type:id
                                                    | VOID;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                        CONSTANTS DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                           ConstDeclarationLine ::= CONST Type ConstIDList SEMICOLON;

                                    ConstIDList ::= ConstIDList COMMA ConstID
                                                    | ConstID;

                                        ConstID ::= ID:constObj ASSIGN Const
                                                    {:
                                                        foundSymbol(SemanticSymbol.CONST, constObj.toString());
                                                        report_info("ConstDeclaration " + constObj);
                                                    :};

                                          Const ::= CONST_NUMBER
                                                    | CONST_CHAR
                                                    | CONST_BOOL;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                              VAR DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                             VarDeclarationList ::= VarDeclarationList VarDeclarationLine
                                                    | /* epsilon */;

                             VarDeclarationLine ::= Type VarIDList SEMICOLON;

                                      VarIDList ::= VarIDList COMMA VarIDSingle
                                                    | VarIDSingle;

                                    VarIDSingle ::= VarID:varObj
                                                    {:
                                                        foundSymbol(SemanticSymbol.VAR, varObj.toString());
                                                        report_info("VarDeclaration 1 " + varObj);
                                                    :}
                                                    | VarID:varObj
                                                    {:
                                                        report_info("VarDeclaration 3 " + varObj);
                                                    :}
                                                    BRACKETS_LEFT
                                                    {:
                                                        report_info("VarDeclaration 4 " + varObj);
                                                    :}
                                                    BRACKETS_RIGHT
                                                    {:
                                                        foundSymbol(SemanticSymbol.ARRAY, varObj.toString());
                                                        report_info("VarDeclaration 2 " + varObj);
                                                    :};

                                          VarID ::= ID:id
                                                    {:
                                                        RESULT = id;
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                            CLASS DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                               ClassDeclaration ::= CLASS ClassName ClassExtends
                                                    BRACES_LEFT VarDeclarationList
                                                    OptionalMethodDeclarationSection BRACES_RIGHT
                                                    {:
                                                        foundSymbol(SemanticSymbol.CLASS_EXIT, null);
                                                    :};

                                      ClassName ::= ID:id
                                                    {:
                                                        foundSymbol(SemanticSymbol.CLASS, id.toString());
                                                        report_info("Entered class: " + id);
                                                    :};

                                   ClassExtends ::= EXTENDS Type
                                                    {:
                                                        report_info ("Parsed nonempty class extends");
                                                    :}
                                                    | /* epsilon */
                                                    {:
                                                        report_info ("Parsed empty class extends");
                                                    :};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                           METHOD DECLARATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                       MethodDeclarationSection ::= BRACES_LEFT MethodDeclarationList BRACES_RIGHT;

               OptionalMethodDeclarationSection ::= MethodDeclarationSection
                                                    | /* epsilon */;

                          MethodDeclarationList ::= MethodDeclarationList MethodDeclaration
                                                    | /* epsilon */;

                              MethodDeclaration ::= OptionalStatic MethodType MethodName
                                                    PARENTHESES_LEFT FormalParameterSection PARENTHESES_RIGHT
                                                    VarDeclarationList
                                                    StatementBlock
                                                    {:
                                                        foundSymbol(SemanticSymbol.METHOD_EXIT, null);
                                                    :};

                                    MethodName ::= ID:id
                                                    {:
                                                        foundSymbol(SemanticSymbol.METHOD, id.toString());
                                                        report_info("Entered method: " + id);
                                                    :};

                        FormalParameterSection ::= FormalParameterList
                                                    | /* epsilon */;

                           FormalParameterList ::= FormalParameterList COMMA FormalParameter
                                                    | FormalParameter;

                                FormalParameter ::= Type ID
                                                    | Type ID BRACKETS_LEFT BRACKETS_RIGHT;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                   STATEMENTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                 StatementBlock ::= BRACES_LEFT StatementList BRACES_RIGHT;

                                  StatementList ::= StatementList Statement
                                                    | /* epsilon */;

                                      Statement ::= StatementDesignator
                                                    | StatementIf
                                                    | StatementFor
                                                    | StatementBreak
                                                    | StatementContinue
                                                    | StatementReturn
                                                    | StatementRead
                                                    | StatementPrint
                                                    | StatementBlock;

                            StatementDesignator ::= DesignatorStatement SEMICOLON;

                                    StatementIf ::= IF PARENTHESES_LEFT Condition PARENTHESES_RIGHT Statement
                                                    | IF PARENTHESES_LEFT Condition PARENTHESES_RIGHT Statement
                                                    ELSE Statement;

                                   StatementFor ::= FOR PARENTHESES_LEFT
                                                    OptionalDesignatorStatement SEMICOLON
                                                    OptionalCondition SEMICOLON
                                                    OptionalDesignatorStatement SEMICOLON
                                                    PARENTHESES_RIGHT Statement;

                                 StatementBreak ::= BREAK SEMICOLON;

                              StatementContinue ::= CONTINUE SEMICOLON;

                                StatementReturn ::= RETURN SEMICOLON
                                                    | RETURN Expression SEMICOLON;

                                  StatementRead ::= READ PARENTHESES_LEFT Designator PARENTHESES_RIGHT SEMICOLON;

                                 StatementPrint ::= PRINT PARENTHESES_LEFT Expression PARENTHESES_RIGHT;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                         DESIGNATOR STATEMENT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    OptionalDesignatorStatement ::= DesignatorStatement
                                                    | /* epsilon */;

                            DesignatorStatement ::= Designator AssignOperator Expression
                                                    | Designator MethodCall
                                                    | Designator INCREMENT
                                                    | Designator DECREMENT;

                         ActualParameterSection ::= ActualParameterList
                                                    | /* epsilon */;

                            ActualParameterList ::= ActualParameterList COMMA ActualParameter
                                                    | ActualParameter;

                                ActualParameter ::= Expression;

                                     Designator ::= ID MemberList;

                                     MemberList ::= MemberList Member
                                                    | /* epsilon */;

                                         Member ::= DOT ID
                                                    | Dimension;

                              OptionalDimension ::= Dimension
                                                    | /* epsilon */;

                             OptionalMethodCall ::= MethodCall
                                                    | /* epsilon */;

                                     MethodCall ::= PARENTHESES_LEFT ActualParameterSection PARENTHESES_RIGHT;

                                      Dimension ::= BRACKETS_LEFT Expression BRACKETS_RIGHT;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                    CONDITION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                              OptionalCondition ::= Condition
                                                    | /* epsilon */;

                                      Condition ::= ConditionTermList ;

                              ConditionTermList ::= ConditionTermList OR ConditionTerm
                                                    | ConditionTerm;

                                  ConditionTerm ::= ConditionFactorList;

                            ConditionFactorList ::= ConditionFactorList AND ConditionFactor
                                                    | ConditionFactor;

                                ConditionFactor ::= Expression
                                                    | Expression RelationalOperator Expression;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                   Expression
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                     Expression ::= OptionalUnaryMinus AdditionTermList;

                             OptionalUnaryMinus ::= SUBTRACTION
                                                    | /* epsilon */;

                               AdditionTermList ::= AdditionTermList AdditionOperator Term
                                                    | Term;

                                           Term ::= MultiplicationFactorList;

                       MultiplicationFactorList ::= MultiplicationFactorList MultiplicationOperator Factor
                                                    | Factor;

                                         Factor ::= Designator OptionalMethodCall
                                                    | CONST_NUMBER
                                                    | CONST_CHAR
                                                    | CONST_BOOL
                                                    | NEW Type OptionalDimension
                                                    | PARENTHESES_LEFT Expression PARENTHESES_RIGHT;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                    OPERATORS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                               AdditionOperator ::= AdditionOperatorLeft
                                                    | AdditionOperatorRight;

                           AdditionOperatorLeft ::= ADDITION
                                                    | SUBTRACTION;

                          AdditionOperatorRight ::= ASSIGN_ADDITION
                                                    | ASSIGN_SUBTRACTION;

                         MultiplicationOperator ::= MultiplicationOperatorLeft
                                                    | MultiplicationOperatorRight;

                     MultiplicationOperatorLeft ::= MULTIPLICATION
                                                    | DIVISION
                                                    | MODULO;

                    MultiplicationOperatorRight ::= ASSIGN_MULTIPLICATION
                                                    | ASSIGN_DIVISION
                                                    | ASSIGN_MODULO;

                             RelationalOperator ::= EQUAL
                                                    | NOT_EQUAL
                                                    | GREATER
                                                    | GREATER_EQUAL
                                                    | LESS
                                                    | LESS_EQUAL;

                                 AssignOperator ::= ASSIGN
                                                    | AdditionOperatorRight
                                                    | MultiplicationOperatorRight;



