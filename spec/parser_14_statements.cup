     StatementBlock ::= BRACES_LEFT
                        {:
                            ctx.foundSymbol(SemanticSymbol.STATEMENT_BLOCK, null);
                        :}
                        StatementList BRACES_RIGHT
                        {:
                            ctx.foundSymbol(SemanticSymbol.STATEMENT_BLOCK_EXIT, null);
                        :};

      StatementList ::= StatementList Statement
                        | /* epsilon */;

          Statement ::= StatementDesignator
                        | StatementIf
                        | StatementFor
                        | StatementBreak
                        | StatementContinue
                        | StatementReturn
                        | StatementRead
                        | StatementPrint
                        | StatementBlock;

StatementDesignator ::= DesignatorStatement
                        {:
                        :}
                        SEMICOLON
                        {:
                        :};

        StatementIf ::= IF PARENTHESES_LEFT Condition PARENTHESES_RIGHT
                        {:
                            ctx.foundSymbol(SemanticSymbol.IFSTART,
                                new SemanticParameters());
                        :}
                        Statement OptionalElse;

       OptionalElse ::= ELSE
                        {:
                            ctx.foundSymbol(SemanticSymbol.ELSESTART,
                                new SemanticParameters());
                        :}
                        Statement
                        {:
                            ctx.foundSymbol(SemanticSymbol.ELSEEND,
                                new SemanticParameters());
                        :}
                        | /* epsilon */
                        {:
                            ctx.foundSymbol(SemanticSymbol.IFEND,
                                new SemanticParameters());
                        :};

       StatementFor ::= FOR PARENTHESES_LEFT
                        OptionalDesignatorStatement SEMICOLON
                        OptionalCondition SEMICOLON
                        OptionalDesignatorStatement SEMICOLON
                        PARENTHESES_RIGHT Statement;

     StatementBreak ::= BREAK SEMICOLON;

  StatementContinue ::= CONTINUE SEMICOLON;

    StatementReturn ::= RETURN SEMICOLON
                        {:
                            ctx.foundSymbol(SemanticSymbol.RETURN,
                                new SemanticParameters()
                                .setExpression(new ExpressionToken(
                                    Tab.noType,
                                    false)));
                        :}
                        | RETURN Expression:expression SEMICOLON
                        {:
                            // ExpressionToken expression;
                            ctx.foundSymbol(SemanticSymbol.RETURN,
                                new SemanticParameters()
                                .setExpression(expression));
                        :};

      StatementRead ::= READ PARENTHESES_LEFT Designator PARENTHESES_RIGHT SEMICOLON;

     StatementPrint ::= PRINT PARENTHESES_LEFT Expression:expr PARENTHESES_RIGHT SEMICOLON
                        {:
                            // ExpressionToken expr;
                            ctx.foundSymbol(SemanticSymbol.PRINT,
                                new SemanticParameters()
                                .setExpression(expr));
                        :};