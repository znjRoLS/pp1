     StatementBlock ::= BRACES_LEFT:leftBraces
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.STATEMENT_BLOCK,
                                leftBracesleft,
                                null
                            );
                        :}
                        StatementList BRACES_RIGHT:rightBraces
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.STATEMENT_BLOCK_EXIT,
                                rightBracesleft,
                                null
                            );
                        :};

      StatementList ::= StatementList Statement
                        | /* epsilon */;

          Statement ::= StatementDesignator
                        | StatementIf
                        | StatementFor
                        | StatementBreak
                        | StatementContinue
                        | StatementReturn
                        | StatementRead
                        | StatementPrint
                        | StatementBlock;

StatementDesignator ::= DesignatorStatement
                        {:
                        :}
                        SEMICOLON
                        {:
                        :};

        StatementIf ::= IF PARENTHESES_LEFT Condition:condition PARENTHESES_RIGHT
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.IF_START,
                                conditionleft,
                                null
                            );
                        :}
                        Statement OptionalElse;

       OptionalElse ::= ELSE:obj
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.ELSE_START,
                                objleft,
                                null
                            );
                        :}
                        Statement:statement
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.ELSE_END,
                                statementleft,
                                null
                            );
                        :}
                        | /* epsilon */
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.IF_END,
                                -1,
                                null
                            );
                        :};

       StatementFor ::= FOR PARENTHESES_LEFT
                        OptionalDesignatorStatement:designatorInit SEMICOLON
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.FOR_INIT,
                                designatorInitleft,
                                null
                            );
                        :}
                        OptionalCondition:condition SEMICOLON
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.FOR_CONDITION,
                                conditionleft,
                                null
                            );
                        :}
                        OptionalDesignatorStatement:designatorIter
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.FOR_ITERATION,
                                designatorIterleft,
                                null
                            );
                        :}
                        PARENTHESES_RIGHT Statement:statement
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.FOR_BLOCK,
                                statementleft,
                                null
                            );
                        :};

     StatementBreak ::= BREAK:obj SEMICOLON
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.BREAK,
                                objleft,
                                null
                            );
                        :};

  StatementContinue ::= CONTINUE:obj SEMICOLON
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.CONTINUE,
                                objleft,
                                null
                            );
                        :};

    StatementReturn ::= RETURN:obj SEMICOLON
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.RETURN,
                                objleft,
                                new SemanticParameters()
                                    .setExpression(new ExpressionToken(
                                        Tab.noType,
                                        false)
                                    )
                            );
                        :}
                        | RETURN:obj Expression:expression SEMICOLON
                        {:
                            // ExpressionToken expression;
                            ctx.foundSymbol(
                                SemanticSymbol.RETURN,
                                objleft,
                                new SemanticParameters()
                                    .setExpression(expression)
                            );
                        :};

      StatementRead ::= READ:obj PARENTHESES_LEFT Designator:design PARENTHESES_RIGHT SEMICOLON
                        {:
                            ctx.foundSymbol(
                                SemanticSymbol.READ,
                                objleft,
                                null
                            );
                        :};

     StatementPrint ::= PRINT:obj PARENTHESES_LEFT Expression:expr PARENTHESES_RIGHT SEMICOLON
                        {:
                            // ExpressionToken expr;
                            ctx.foundSymbol(
                                SemanticSymbol.PRINT,
                                objleft,
                                new SemanticParameters()
                                    .setExpression(expr)
                            );
                        :};