OptionalDesignatorStatement ::= DesignatorStatement
                                | /* epsilon */;

        DesignatorStatement ::= Designator:design AssignOperator Expression:expr
                                {:
                                    // ExpressionToken expr;
                                    // Obj design;
                                    report_info("Found assign statement");
                                    if (expr.objType.getKind() != design.getType().getKind()) {
                                        //report_info("expr " + printExpr(expr) + "| design " + printObj(design));
                                        //report_info(expr.objType.getKind() + " " + design.getType().getKind());
                                        report_error("Not assignable!");
                                    } else {
                                        Code.store(design);
                                    }

                                :}
                                | Designator:function MethodCall
                                {:
                                    // Obj function;
                                    report_info("Function call: " + function.getName());
                                    if (function.getKind() != Obj.Meth) {
                                        report_error("Not a function!");
                                    }
                                    int functionAdr = function.getAdr() - Code.pc;
                                    Code.put(Code.call);
                                    Code.put2(functionAdr);
                                    if (function.getType() != Tab.noType) {
                                        Code.put(Code.pop);
                                    }

                                :}
                                | Designator INCREMENT
                                | Designator DECREMENT;

     ActualParameterSection ::= ActualParameterList
                                | /* epsilon */;

        ActualParameterList ::= ActualParameterList COMMA ActualParameter
                                | ActualParameter;

            ActualParameter ::= Expression;

                 Designator ::= ID:id
                                {:
                                    ctx.foundSymbol(SemanticSymbol.DESIGNATOR, id.toString());
                                    Obj found = Tab.find(id.toString());
                                    if (found == Tab.noObj) {
                                        report_error("Identifier name not declared: " + id.toString());
                                        RESULT = null;
                                    } else {
                                        //RESULT = new ExpressionToken(found.getType(), found.getType().getKind() == Obj.Var);
                                        //report_info("nestoasdasd " + printObj(found));
                                        RESULT = found;
                                    }
                                :}
                                MemberList;

                 MemberList ::= MemberList Member
                                | /* epsilon */;

                     Member ::= DOT ID
                                | Dimension;

          OptionalDimension ::= Dimension
                                | /* epsilon */;

         OptionalMethodCall ::= MethodCall
                                | /* epsilon */;

                 MethodCall ::= PARENTHESES_LEFT ActualParameterSection PARENTHESES_RIGHT
                                {:
                                    ctx.foundSymbol(SemanticSymbol.METHOD_CALL, null);
                                :};

                  Dimension ::= BRACKETS_LEFT Expression BRACKETS_RIGHT;