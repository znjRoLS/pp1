OptionalDesignatorStatement ::= DesignatorStatement
                                | /* epsilon */;

        DesignatorStatement ::= Designator:design AssignOperator Expression:expr
                                {:
                                    // ExpressionToken expr;
                                    // String design;
                                    ctx.foundSymbol(
                                        SemanticSymbol.DESIGNATOR_ASSIGN,
                                        designleft,
                                        new SemanticParameters()
                                            .setName(design)
                                            .setExpression(expr)
                                    );

                                    RESULT = expr;
                                :}
                                |
                                Designator:design AssignOperator error
                                {:
                                    // String design;
                                    ctx.foundSymbol(
                                        SemanticSymbol.ERROR_RECOVERED,
                                        designleft,
                                        new SemanticParameters()
                                            .setName(design)
                                            .setValue(ErrorType.EXPRESSION_ASSIGN)
                                    );

                                    RESULT = null;
                                :}
                                | Designator:function
                                {:
                                     // String function;
                                     Struct objectType = ctx.foundSymbol(
                                         SemanticSymbol.METHOD_CALL_START,
                                         functionleft,
                                         new SemanticParameters()
                                             .setName(function)
                                     );
                                :}
                                MethodCall
                                {:
                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.METHOD_CALL,
                                        functionleft,
                                        null
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Designator:design INCREMENT
                                {:
                                    // String design;
                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.INCREMENT,
                                        designleft,
                                        new SemanticParameters()
                                            .setName(design)
                                            .setValue(1)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Designator:design DECREMENT
                                {:
                                    // String design;
                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.INCREMENT,
                                        designleft,
                                        new SemanticParameters()
                                            .setName(design)
                                            .setValue(-1)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :};

     ActualParameterSection ::= ActualParameterList
                                | /* epsilon */;

        ActualParameterList ::= ActualParameterList COMMA ActualParameter
                                | ActualParameter;

            ActualParameter ::= Expression:expression;

                 Designator ::= ID:id
                                {:
                                    // String id;

                                    ctx.foundSymbol(
                                        SemanticSymbol.DESIGNATOR_FIRSTPART,
                                        idleft,
                                        new SemanticParameters()
                                            .setName(id)
                                    );

                                    RESULT = id;
                                :}
                                MemberList:member
                                {:
                                    // String id;
                                    // String member;

                                    //ctx.foundSymbol(
                                    //   SemanticSymbol.DESIGNATOR_END,
                                    //    idleft,
                                    //    null
                                    //);
                                    //    new SemanticParameters()
                                    //        .setName(id + member)
                                    //);

                                    //RESULT = id + member;
                                :};

                 MemberList ::= MemberList:member1 Member:member2
                                {:
                                    // String member1;
                                    // String member2;

                                    RESULT = member1 + member2;
                                :}
                                | /* epsilon */
                                {:
                                    RESULT = "";
                                :};

                     Member ::= DOT ID:id
                                {:
                                    // String id;

                                    ctx.foundSymbol(
                                        SemanticSymbol.DESIGNATOR_MEMBER_CLASS,
                                        idleft,
                                        new SemanticParameters()
                                            .setName(id)
                                    );

                                    RESULT = "." + id;
                                :}
                                | BRACKETS_LEFT:leftBracket
                                {:
                                    ctx.foundSymbol(
                                        SemanticSymbol.DESIGNATOR_MEMBER_ARRAY,
                                        leftBracketleft,
                                        null
                                    );

                                    RESULT = "[]";
                                :}
                                Expression BRACKETS_RIGHT;

          OptionalDimension ::= Dimension
                                | /* epsilon */;

         OptionalMethodCall ::= MethodCall
                                | /* epsilon */;

                 MethodCall ::= PARENTHESES_LEFT ActualParameterSection PARENTHESES_RIGHT;

                  Dimension ::= BRACKETS_LEFT Expression BRACKETS_RIGHT;