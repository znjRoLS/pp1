OptionalDesignatorStatement ::= DesignatorStatement
                                | /* epsilon */;

        DesignatorStatement ::= Designator:pair1 AssignOperator Expression:pair2
                                {:

                                :}
                                | Designator MethodCall
                                | Designator INCREMENT
                                | Designator DECREMENT;

     ActualParameterSection ::= ActualParameterList
                                | /* epsilon */;

        ActualParameterList ::= ActualParameterList COMMA ActualParameter
                                | ActualParameter;

            ActualParameter ::= Expression;

                 Designator ::= ID:id
                                {:
                                    ctx.foundSymbol(SemanticSymbol.DESIGNATOR, id.toString());
                                    Obj found = Tab.find(id.toString());
                                    if (found == Tab.noObj) {
                                        report_error("Identifier name not declared: " + id.toString());
                                        RESULT = null;
                                    } else {
                                        RESULT = new ExpressionToken(found.getType().getKind(), found.getType().getKind() == Obj.Var);
                                    }
                                :}
                                MemberList;

                 MemberList ::= MemberList Member
                                | /* epsilon */;

                     Member ::= DOT ID
                                | Dimension;

          OptionalDimension ::= Dimension
                                | /* epsilon */;

         OptionalMethodCall ::= MethodCall
                                | /* epsilon */;

                 MethodCall ::= PARENTHESES_LEFT ActualParameterSection PARENTHESES_RIGHT
                                {:
                                    ctx.foundSymbol(SemanticSymbol.METHOD_CALL, null);
                                :};

                  Dimension ::= BRACKETS_LEFT Expression BRACKETS_RIGHT;