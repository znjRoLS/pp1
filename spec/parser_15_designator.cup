OptionalDesignatorStatement ::= DesignatorStatement
                                | /* epsilon */;

        DesignatorStatement ::= Designator:design AssignOperator Expression:expr
                                {:
                                    // ExpressionToken expr;
                                    // String design;
                                    ctx.foundSymbol(SemanticSymbol.DESIGNATOR_ASSIGN,
                                        new SemanticParameters()
                                        .setName(design)
                                        .setExpression(expr));

                                    RESULT = expr;
                                :}
                                |
                                Designator:design AssignOperator error
                                {:
                                    // String design;
                                    ctx.foundSymbol(SemanticSymbol.ERROR_RECOVERED,
                                        new SemanticParameters()
                                        .setName(design)
                                        .setValue(ErrorType.EXPRESSION_ASSIGN));

                                    RESULT = null;
                                :}
                                | Designator:function MethodCall
                                {:
                                    // String function;
                                    Struct objectType = ctx.foundSymbol(SemanticSymbol.METHOD_CALL,
                                        new SemanticParameters()
                                        .setName(function));

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Designator:design INCREMENT
                                {:
                                    Struct objectType = ctx.foundSymbol(SemanticSymbol.SINGLE_EXPRESSION,
                                        new SemanticParameters()
                                        .setName(design)
                                        .setType("int")
                                        .setValue(Code.inc));

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Designator:design DECREMENT
                                {:
                                    Struct objectType = ctx.foundSymbol(SemanticSymbol.SINGLE_EXPRESSION,
                                        new SemanticParameters()
                                        .setName(design)
                                        .setType("int")
                                        .setValue(Code.inc+1));

                                    RESULT = new ExpressionToken(objectType, false);
                                :};

     ActualParameterSection ::= ActualParameterList
                                | /* epsilon */;

        ActualParameterList ::= ActualParameterList COMMA ActualParameter
                                | ActualParameter;

            ActualParameter ::= Expression:expression;

                 Designator ::= ID:id MemberList
                                {:
                                    // String id;
                                    ctx.foundSymbol(SemanticSymbol.DESIGNATOR,
                                        new SemanticParameters()
                                        .setName(id));

                                    RESULT = id;
                                :};

                 MemberList ::= MemberList Member
                                | /* epsilon */;

                     Member ::= DOT ID
                                | Dimension;

          OptionalDimension ::= Dimension
                                | /* epsilon */;

         OptionalMethodCall ::= MethodCall
                                | /* epsilon */;

                 MethodCall ::= PARENTHESES_LEFT ActualParameterSection PARENTHESES_RIGHT;

                  Dimension ::= BRACKETS_LEFT Expression BRACKETS_RIGHT;