  OptionalCondition ::= Condition
                        | /* epsilon */;

          Condition ::= ConditionTermList:expression
                        {:
                            // ExpressionToken expression;
                            RESULT = expression;
                        :};

  ConditionTermList ::= ConditionTermList:expression1 OR ConditionTerm:expression2
                        {:
                            // ExpressionToken expression1;
                            // ExpressionToken expression2;
                            if (expression1.objType.getKind() != Struct.Bool) {
                                report_error("Expression not boolean! " + printExpr(expression1));
                            }
                            if (expression2.objType.getKind() != Struct.Bool) {
                                report_error("Expression not boolean! " + printExpr(expression2));
                            }
                            Code.put(Code.add);
                            RESULT = expression1;
                        :}
                        | ConditionTerm:expression
                        {:
                            // ExpressionToken expression;
                            RESULT = expression;
                        :}
                        ;

      ConditionTerm ::= ConditionFactorList:expression
                        {:
                            // ExpressionToken expression;
                            if (expression.objType.getKind() != Struct.Bool) {
                                report_error("Condition not of type bool!");
                            }
                            RESULT = expression;
                        :}
                        ;

ConditionFactorList ::= ConditionFactorList:expression1 AND ConditionFactor:expression2
                        {:
                            // ExpressionToken expression1;
                            // ExpressionToken expression2;
                            if (expression1.objType.getKind() != Struct.Bool) {
                                report_error("Expression not boolean! " + printExpr(expression1));
                            }
                            if (expression2.objType.getKind() != Struct.Bool) {
                                report_error("Expression not boolean! " + printExpr(expression2));
                            }
                            Code.put(Code.mul);
                            RESULT = expression1;
                        :}
                        | ConditionFactor:expression
                        {:
                            // ExpressionToken expression;
                            if (expression.objType.getKind() != Struct.Bool) {
                                report_error("Condition not of type bool!");
                            }
                            RESULT = expression;
                        :}
                        ;

    ConditionFactor ::= Expression:expression
                        {:
                            // ExpressionToken expression;
                            if (expression.objType.getKind() != Struct.Bool) {
                                report_error("Condition not of type bool!");
                            }
                            RESULT = expression;
                        :}
                        | Expression:expression1 RelationalOperator:operator Expression:expression2
                        {:
                            // ExpressionToken expression1;
                            // ExpressionToken expression2;
                            if (!expression1.compatible(expression2)) {
                                report_error("Expressions not compatible! " + printExpr(expression1) + " - " + printExpr(expression2));
                            }
                            ctx.symbolRelop(operator);
                            RESULT = new ExpressionToken(new Struct(Struct.Bool), false);
                        :};
