  OptionalCondition ::= Condition
                        | /* epsilon */;

          Condition ::= ConditionTermList:expression
                        {:
                            // ExpressionToken expression;
                            ctx.foundSymbol(SemanticSymbol.SINGLE_EXPRESSION,
                                new SemanticParameters()
                                .setExpression(expression)
                                .setType("bool"));
                            RESULT = expression;
                        :};

  ConditionTermList ::= ConditionTermList:expression1 OR ConditionTerm:expression2
                        {:
                            // ExpressionToken expression1;
                            // ExpressionToken expression2;
                            ctx.foundSymbol(SemanticSymbol.EXPRESSION,
                                new SemanticParameters()
                                .setExpression(expression1)
                                .setExpression2(expression2)
                                .setType("bool")
                                .setValue(Code.add));

                            RESULT = expression1;
                        :}
                        | ConditionTerm:expression
                        {:
                            // ExpressionToken expression;
                            RESULT = expression;
                        :}
                        ;

      ConditionTerm ::= ConditionFactorList:expression
                        {:
                            // ExpressionToken expression;
                            RESULT = expression;
                        :}
                        ;

ConditionFactorList ::= ConditionFactorList:expression1 AND ConditionFactor:expression2
                        {:
                            // ExpressionToken expression1;
                            // ExpressionToken expression2;
                            ctx.foundSymbol(SemanticSymbol.EXPRESSION,
                                new SemanticParameters()
                                .setExpression(expression1)
                                .setExpression2(expression2)
                                .setType("bool")
                                .setValue(Code.mul));

                            RESULT = expression1;
                        :}
                        | ConditionFactor:expression
                        {:
                            // ExpressionToken expression;
                            RESULT = expression;
                        :}
                        ;

    ConditionFactor ::= Expression:expression
                        {:
                            // ExpressionToken expression;
                            RESULT = expression;
                        :}
                        | Expression:expression1 RelationalOperator:operator Expression:expression2
                        {:
                            // ExpressionToken expression1;
                            // ExpressionToken expression2;

                            Struct objectType = ctx.foundSymbol(SemanticSymbol.RELOP,
                                new SemanticParameters()
                                .setExpression(expression1)
                                .setExpression2(expression2)
                                .setValue(operator));

                            RESULT = new ExpressionToken(objectType, false);
                        :};
