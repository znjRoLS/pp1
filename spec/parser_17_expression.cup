                 Expression ::= AdditionTermList:expression
                                {:
                                    // ExpressionToken expression;

                                    ctx.foundSymbol(
                                        SemanticSymbol.SINGLE_EXPRESSION,
                                        expressionleft,
                                        new SemanticParameters()
                                            .setExpression(expression)
                                            .setType("int")
                                    );

                                    RESULT = expression;
                                :};


           AdditionTermList ::= AdditionTermList:expression1 AdditionOperator:operator Term:expression2
                                {:
                                    // ExpressionToken expression1;
                                    // ExpressionToken expression2;
                                    // Integer operator;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.EXPRESSION,
                                        expression1left,
                                        new SemanticParameters()
                                            .setExpression(expression1)
                                            .setExpression2(expression2)
                                            .setType("int")
                                            .setValue(operator)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Term:expression
                                {:
                                    // ExpressionToken expression;

                                    RESULT = expression;
                                :}
                                | SUBTRACTION Term:expression
                                {:
                                    // ExpressionToken expression;

                                    ctx.foundSymbol(
                                        SemanticSymbol.NEGATE,
                                        expressionleft,
                                        new SemanticParameters()
                                            .setExpression(expression)
                                    );

                                    RESULT = expression;
                                :}
                                ;

                       Term ::= MultiplicationFactorList:expression
                                {:
                                    // ExpressionToken expression;

                                    RESULT = expression;
                                :};

   MultiplicationFactorList ::= MultiplicationFactorList:expression1 MultiplicationOperator:operator Factor:expression2
                                {:
                                    // ExpressionToken expression1;
                                    // ExpressionToken expression2;
                                    // Integer operator;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.EXPRESSION,
                                        expression1left,
                                        new SemanticParameters()
                                            .setExpression(expression1)
                                            .setExpression2(expression2)
                                            .setType("int")
                                            .setValue(operator)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Factor:expression
                                {:
                                    // ExpressionToken expression;

                                    RESULT = expression;
                                :};

                     Factor ::= Designator:varName
                                {:
                                    // String varName;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.DESIGNATOR_FACTOR,
                                        varNameleft,
                                        new SemanticParameters()
                                            .setName(varName)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | Designator:function
                                {:
                                    // String function;
                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.METHOD_CALL_START,
                                        functionleft,
                                        null
                                    );
                                :}
                                MethodCall:argNum
                                {:
                                    // String function;
                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.METHOD_CALL_FACTOR,
                                        functionleft,
                                        new SemanticParameters()
                                            .setName(function)
                                            .setValue(argNum)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | CONST_NUMBER:val
                                {:
                                    // Integer val;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.CONST_FACTOR,
                                        valleft,
                                        new SemanticParameters()
                                            .setValue(val)
                                            .setType("int")
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | CONST_CHAR:val
                                {:
                                    // char val;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.CONST_FACTOR,
                                        valleft,
                                        new SemanticParameters()
                                            .setValue((int)val)
                                            .setType("char")
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | CONST_BOOL:val
                                {:
                                    // boolean val;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.CONST_FACTOR,
                                        valleft,
                                        new SemanticParameters()
                                            .setValue(val?1:0)
                                            .setType("bool")
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | NEW Type:type
                                {:
                                    // String type;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.NEW,
                                        typeleft,
                                        new SemanticParameters()
                                            .setName(type)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | NEW Type:type Dimension
                                {:
                                    // String type;

                                    Struct objectType = ctx.foundSymbol(
                                        SemanticSymbol.NEW_ARRAY,
                                        typeleft,
                                        new SemanticParameters()
                                            .setName(type)
                                    );

                                    RESULT = new ExpressionToken(objectType, false);
                                :}
                                | PARENTHESES_LEFT Expression:expr PARENTHESES_RIGHT
                                {:
                                    // ExpressionToken expr;

                                    RESULT = expr;
                                :};